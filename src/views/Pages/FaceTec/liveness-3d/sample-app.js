import { FaceCaptcha } from "@oiti/facecaptcha-core";
import axios from "axios";
import { FaceTecSDK } from "../../../../../core/core-sdk/FaceTecSDK.js/FaceTecSDK";
import { ThemeHelpers } from "../../../../../core/utilities/ThemeHelpers";
import { LivenessCheckProcessor } from "../../../../../core/processor/LivenessCheckProcessor";
import { Config } from "../Config";
import { SampleAppUtilities } from "../../../../../core/utilities/SampleAppUtilities";
import * as FaceTecStringsPtBr from "../../../../../core-sdk-optional/FaceTecStrings.pt-br";
import * as PackageJson from "../../../../../package.json";
import { CustomFaceTecStatus } from "./custom-facetec-status";

export var SampleApp = (function () {
  let resultProductKey = "";
  let resultSessionToken = "";

  let latestEnrollmentIdentifier = "";
  let latestSessionResult = null;
  let latestIDScanResult = null;
  let latestProcessor;

  const status = "Inicializando...";
  const deviceKeyIdentifier = "dF2CabwQ6OCLFJaV2QqZhP7OUErHv0uz";
  const publicFaceScanEncryptionKey =
    "-----BEGIN PUBLIC KEY-----\n" +
    "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5PxZ3DLj+zP6T6HFgzzk\n" +
    "M77LdzP3fojBoLasw7EfzvLMnJNUlyRb5m8e5QyyJxI+wRjsALHvFgLzGwxM8ehz\n" +
    "DqqBZed+f4w33GgQXFZOS4AOvyPbALgCYoLehigLAbbCNTkeY5RDcmmSI/sbp+s6\n" +
    "mAiAKKvCdIqe17bltZ/rfEoL3gPKEfLXeN549LTj3XBp0hvG4loQ6eC1E1tRzSkf\n" +
    "GJD4GIVvR+j12gXAaftj3ahfYxioBH7F7HQxzmWkwDyn3bqU54eaiB7f0ftsPpWM\n" +
    "ceUaqkL2DZUvgN0efEJjnWy5y1/Gkq5GGWCROI9XG/SwXJ30BbVUehTbVcD70+ZF\n" +
    "8QIDAQAB\n" +
    "-----END PUBLIC KEY-----";

  let staticAppKey = "";

  let successCallback,
    errorCallback = () => ({});

  const staticUserAgent = FaceTecSDK.createFaceTecAPIUserAgentString("");

  const defaultHomePage = new URL(PackageJson.default.homepage);

  const loadAssets = () => {
    // Defina um caminho de diretório para outros recursos do FaceTec Browser SDK.
    // FaceTecSDK.setResourceDirectory("../core-sdk/FaceTecSDK.js/resources");
    FaceTecSDK.setResourceDirectory(
      `${defaultHomePage.pathname}core-sdk/FaceTecSDK.js/resources`
    );

    // Defina o caminho do diretório para as imagens necessárias do FaceTec Browser SDK.
    FaceTecSDK.setImagesDirectory("./../../../../../core-sdk/FaceTec_images");

    // Defina as personalizações do FaceTec Device SDK.
    ThemeHelpers.setAppTheme(ThemeHelpers.getCurrentTheme());

    // Initialize FaceTec Browser SDK and configure the UI features.
    Config.initializeFromAutogeneratedConfig(
      FaceTecSDK,
      function (initializedSuccessfully) {
        if (initializedSuccessfully) {
          SampleAppUtilities.enableControlButtons();
        }

        SampleAppUtilities.displayStatus(
          FaceTecSDK.getFriendlyDescriptionForFaceTecSDKStatus(
            FaceTecSDK.getStatus()
          )
        );
      },
      resultProductKey,
      deviceKeyIdentifier,
      publicFaceScanEncryptionKey
    );

    // Inicialize o FaceTec Browser SDK e configure os recursos da interface do usuário.
    FaceTecSDK.initializeInProductionMode(
      resultProductKey,
      deviceKeyIdentifier,
      publicFaceScanEncryptionKey,
      function (initializedSuccessfully) {
        if (initializedSuccessfully) {
          SampleAppUtilities.enableControlButtons();

          //FaceTecSDK.configureLocalization({"localizationJSON": "br"});

          // Set localization
          FaceTecSDK.configureLocalization(FaceTecStringsPtBr);

          onLivenessCheckPressed();
        }

        SampleAppUtilities.displayStatus(
          CustomFaceTecStatus.status[FaceTecSDK.getStatus()].message
        );
      }
    );

    SampleAppUtilities.formatUIForDevice();
  };

  const restartLiveness = () => {
    // Inicialize o FaceTec Browser SDK e configure os recursos da interface do usuário.
    FaceTecSDK.initializeInProductionMode(
      resultProductKey,
      deviceKeyIdentifier,
      publicFaceScanEncryptionKey,
      function (initializedSuccessfully) {
        if (initializedSuccessfully) {
          SampleAppUtilities.enableControlButtons();

          //FaceTecSDK.configureLocalization({"localizationJSON": "br"});

          // Set localization
          FaceTecSDK.configureLocalization(FaceTecStringsPtBr);

          onLivenessCheckPressed();
        }
        SampleAppUtilities.displayStatus(
          FaceTecSDK.getFriendlyDescriptionForFaceTecSDKStatus(
            FaceTecSDK.getStatus()
          )
        );
      }
    );

    SampleAppUtilities.formatUIForDevice();

    SampleAppUtilities.fadeOutMainUIAndPrepareForSession();

    getSessionToken();
  };

  const getProductionKey = async () => {
    await getNewAppKey().then(async (data) => {
      console.log("Aqui teste");
      console.log(data);
      staticAppKey = data.data.appkey;

      console.log(staticAppKey);

      const facecaptchaService = new FaceCaptcha(axios, {
        BaseURL: "https://comercial.certiface.com.br",
        timeout: 20000,
      });

      try {
        const result = await facecaptchaService.getProductionKey({
          appKey: staticAppKey,
        });

        resultProductKey = result.productionKey;

        console.log(result);

        loadAssets();
      } catch (error) {
        errorCallback(
          "FATALERROR",
          "Por favor consultar o administrador do sistema"
        );
      }
    });
  };

  const getNewAppKey = async () => {
    const result = await axios.get(
      "https://app.factafinanceira.com.br/IntegracaoOiti/getAppKey"
    );

    console.log(result);

    if (result.status !== 200) {
      errorCallback(
        "FATALERROR",
        "Por favor consultar o administrador do sistema"
      );
    }

    return result;
  };

  const renewProductionKey = async () => {
    const facecaptchaService = new FaceCaptcha(axios, {
      BaseURL: "https://comercial.certiface.com.br",
    });

    let result = {};

    try {
      result = await facecaptchaService.getProductionKey({
        appKey: staticAppKey,
      });
      console.log("teste aqui agora: ", result);
    } catch (error) {
      try {
        staticAppKey = await getNewAppKey().data.appkey;
        result = await facecaptchaService.getProductionKey({
          appKey: staticAppKey,
        });
      } catch (error) {
        errorCallback(
          "FATALERROR",
          "RENEW Por favor consultar o administrador do sistema"
        );
        return;
      }
    }

    resultProductKey = result.productionKey;
    restartLiveness();
  };

  const getSessionToken = async () => {
    const facecaptchaService = new FaceCaptcha(axios, {
      BaseURL: "https://comercial.certiface.com.br",
      timeout: 20000,
    });

    const result = await facecaptchaService.getSessionToken({
      appkey: staticAppKey,
      userAgent: staticUserAgent,
    });

    resultSessionToken = result.sessionToken;

    // Obtenha um token de sessão do FaceTec SDK e inicie o 3D Liveness Check.
    latestProcessor = new LivenessCheckProcessor(resultSessionToken, SampleApp);
  };

  // Inicie um 3D Liveness Check.
  const onLivenessCheckPressed = () => {
    SampleAppUtilities.fadeOutMainUIAndPrepareForSession();

    getSessionToken();
  };

  const onComplete = async () => {
    SampleAppUtilities.showMainUI();

    if (!latestProcessor.isSuccess()) {
      // Redefina o identificador de inscrição.
      latestEnrollmentIdentifier = "";

      // Mostrar mensagem de saída antecipada na tela. Se isso ocorrer, verifique os logs.
      /*SampleAppUtilities.displayStatus(
        "A sessão foi encerrada antecipadamente, consulte os logs para obter mais detalhes."
      );*/

      errorCallback(
        "NOTCONFIRMED",
        "A sessão foi encerrada antecipadamente, consulte os logs para obter mais detalhes."
      );

      return;
    }

    // Mostrar mensagem de sucesso na tela
    SampleAppUtilities.displayStatus("Enviado com sucesso");
    successCallback(staticAppKey);
  };

  const setLatestSessionResult = (sessionResult) => {
    latestSessionResult = sessionResult;
  };

  const setIDScanResult = (idScanResult) => {
    latestIDScanResult = idScanResult;
  };

  const getLatestEnrollmentIdentifier = () => {
    return latestEnrollmentIdentifier;
  };

  const setLatestServerResult = (responseJSON) => {};

  const getAppKey = () => {
    return staticAppKey;
  };

  const settCallback = (success, error) => {
    successCallback = success;
    errorCallback = error;
  };

  return {
    status,
    getProductionKey,
    onLivenessCheckPressed,
    onComplete,
    setLatestSessionResult,
    setIDScanResult,
    getLatestEnrollmentIdentifier,
    setLatestServerResult,
    getAppKey,
    settCallback,
    renewProductionKey,
  };
})();
